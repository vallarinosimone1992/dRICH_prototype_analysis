::::::::::::::
computing.h
::::::::::::::
#include "definition.h"

void computeRMS(THeader *run);
void computeCutSingleParticle(THeader *run);
void newSingleParticle(THeader *run);
void singleParticle(THeader *run);
::::::::::::::
correction.h
::::::::::::::
#include "definition.h"


void positionCorrection(THeader *run);
void opticalCenterX(THeader *run);
void opticalCenterY(THeader *run);
::::::::::::::
fillMAPS.h
::::::::::::::
#include "definition.h"

void getRunNumbers(map<int,int> *map_GEM_run, map<int,double> *map_AeroMirrorPosition, map<int,double> *map_GasMirrorPosition);
void getMapMAPMT(map<string,int> *map_MAPMT1, map<string,int> *map_MAPMT2);
void getMapMPPC(map<string,int> *map_MPPC1, map<string,int> *map_MPPC2);
void getTimeCalibrationDataMAPMT(map<int,double> *map_time_MAPMT);
void getTimeCalibrationDataMPPC(map<int,double> *map_time_MPPC);
void readHeaders(int run, THeader *runHeader);
::::::::::::::
getChannel.h
::::::::::::::
#include "definition.h"


void envVarCheck();
void getMaps();
int getMarocChip(int mCh);
int getMarocBoard(int fiber, THeader *run);
void upstreamMaroc(int fiber, THeader *run);
double timeCalibrationMAPMT(double time, int channel, int pmt);
double timeCalibrationMPPC(double time, int channel, int pmt);
int getMPPC_ch(int fiber, int mCh, int marocBoard, int chip, bool marocUpstream);
int getMAPMT_ch(int fiber, int mCh, int marocBoard, int chip, bool marocUpstream);
::::::::::::::
integrate.h
::::::::::::::
#include "definition.h"

void TTreeIntegration(THeader *run);
void noGEM_Integration(THeader *run);

::::::::::::::
photoDetPosition.h
::::::::::::::
#include <iostream>
#include <stdio.h>
#include <map>
#include <iterator>
#include <vector>
#include <string>

#include <TSystem.h>

using namespace std;

int FiberToPhDet(int fiber, int cmp[8]);
void MAPMTposition(int channel, int place, double *x, double *y, double *r);
void MPPCposition(int channel, int place, double *x, double *y, double *r);
::::::::::::::
readData.h
::::::::::::::
#include "fillMAPS.h"
#include "definition.h"

void getMAPMT(THeader *runHead);
void getMPPC(THeader *runHead);
void getSIMULATION(THeader *runHead);
void getSIPM(THeader *runHead);
::::::::::::::
selection.h
::::::::::::::
#include "definition.h"

void rmsCutSelection(THeader *run);
void selectPhotons(THeader *run);
void findTimeCoincidence(THeader *run);
::::::::::::::
tracking.h
::::::::::::::
#include <TH1D.h>
#include "definition.h"


double GEM_getBeamlineOffset(TH1D *h);
void GEM_relative(float *x0, float *y0, float *x1, float *y1);
void GEM_position(THeader *run, float *x0, float *y0, float *x1, float *y1);
void AERO_computing(THeader *run, float *xA, float *yA, float *mx, float *my, float x0, float y0, float x1, float y1);

::::::::::::::
utility.h
::::::::::::::
#ifndef UTILITY_H
#define UTILITY_H
#include <iostream>

void printProgress(double progress);
void printEnd();

#endif
